
PWM_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002978  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002b10  08002b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b20  08002b20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b28  08002b28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002b3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002b3c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c61  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000167a  00000000  00000000  00028ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002a360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000744  00000000  00000000  0002acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000150e8  00000000  00000000  0002b40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f9c  00000000  00000000  000404f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000879c3  00000000  00000000  0004a490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002730  00000000  00000000  000d1e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000d4584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002af8 	.word	0x08002af8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002af8 	.word	0x08002af8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <PWM_Write>:
	__HAL_TIM_SET_AUTORELOAD(_TIM_,_PERIOD_);
	__HAL_TIM_SET_PRESCALER(_TIM_,_PRESCALER_);
}

uint16_t PWM_Write(TIM_HandleTypeDef* __HANDLE__,uint32_t CHANNEL,uint8_t _VAR_)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	4613      	mov	r3, r2
 80004e0:	71fb      	strb	r3, [r7, #7]
	uint16_t COMPARE = (((__HANDLE__)->Instance->ARR/100)*(_VAR_));
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e8:	4a16      	ldr	r2, [pc, #88]	; (8000544 <PWM_Write+0x70>)
 80004ea:	fba2 2303 	umull	r2, r3, r2, r3
 80004ee:	095b      	lsrs	r3, r3, #5
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	fb12 f303 	smulbb	r3, r2, r3
 80004fa:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(__HANDLE__,CHANNEL,COMPARE);
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d104      	bne.n	800050c <PWM_Write+0x38>
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	8afa      	ldrh	r2, [r7, #22]
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
 800050a:	e013      	b.n	8000534 <PWM_Write+0x60>
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	2b04      	cmp	r3, #4
 8000510:	d104      	bne.n	800051c <PWM_Write+0x48>
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	8afb      	ldrh	r3, [r7, #22]
 8000518:	6393      	str	r3, [r2, #56]	; 0x38
 800051a:	e00b      	b.n	8000534 <PWM_Write+0x60>
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	2b08      	cmp	r3, #8
 8000520:	d104      	bne.n	800052c <PWM_Write+0x58>
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	8afb      	ldrh	r3, [r7, #22]
 8000528:	63d3      	str	r3, [r2, #60]	; 0x3c
 800052a:	e003      	b.n	8000534 <PWM_Write+0x60>
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	8afb      	ldrh	r3, [r7, #22]
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
	return COMPARE;
 8000534:	8afb      	ldrh	r3, [r7, #22]

}
 8000536:	4618      	mov	r0, r3
 8000538:	371c      	adds	r7, #28
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	51eb851f 	.word	0x51eb851f

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fb15 	bl	8000b7c <HAL_Init>

  /* USER CODE BEGIN Init */
uint8_t var1 = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	71fb      	strb	r3, [r7, #7]
uint8_t var2 = 50;
 8000556:	2332      	movs	r3, #50	; 0x32
 8000558:	71bb      	strb	r3, [r7, #6]
uint8_t var3 = 100;
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	717b      	strb	r3, [r7, #5]
uint8_t var4 = 150;
 800055e:	2396      	movs	r3, #150	; 0x96
 8000560:	713b      	strb	r3, [r7, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f84d 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 f99f 	bl	80008a8 <MX_GPIO_Init>
  MX_TIM4_Init();
 800056a:	f000 f8ff 	bl	800076c <MX_TIM4_Init>
  MX_TIM2_Init();
 800056e:	f000 f8af 	bl	80006d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000572:	4821      	ldr	r0, [pc, #132]	; (80005f8 <main+0xb0>)
 8000574:	f001 fb16 	bl	8001ba4 <HAL_TIM_Base_Start_IT>

  PWM_Start (&htim4, CH1);
 8000578:	2100      	movs	r1, #0
 800057a:	4820      	ldr	r0, [pc, #128]	; (80005fc <main+0xb4>)
 800057c:	f001 fbce 	bl	8001d1c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	PWM_Write(&htim4, CH1, var1);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	461a      	mov	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	481d      	ldr	r0, [pc, #116]	; (80005fc <main+0xb4>)
 8000588:	f7ff ffa4 	bl	80004d4 <PWM_Write>
	PWM_Write(&htim4, CH2, var2);
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	461a      	mov	r2, r3
 8000590:	2104      	movs	r1, #4
 8000592:	481a      	ldr	r0, [pc, #104]	; (80005fc <main+0xb4>)
 8000594:	f7ff ff9e 	bl	80004d4 <PWM_Write>
	PWM_Write(&htim4, CH3, var3);
 8000598:	797b      	ldrb	r3, [r7, #5]
 800059a:	461a      	mov	r2, r3
 800059c:	2108      	movs	r1, #8
 800059e:	4817      	ldr	r0, [pc, #92]	; (80005fc <main+0xb4>)
 80005a0:	f7ff ff98 	bl	80004d4 <PWM_Write>
	PWM_Write(&htim4, CH4, var4);
 80005a4:	793b      	ldrb	r3, [r7, #4]
 80005a6:	461a      	mov	r2, r3
 80005a8:	210c      	movs	r1, #12
 80005aa:	4814      	ldr	r0, [pc, #80]	; (80005fc <main+0xb4>)
 80005ac:	f7ff ff92 	bl	80004d4 <PWM_Write>

	//HAL_Delay(30);

	var1++;
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	3301      	adds	r3, #1
 80005b4:	71fb      	strb	r3, [r7, #7]
	var2++;
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	3301      	adds	r3, #1
 80005ba:	71bb      	strb	r3, [r7, #6]
	var3++;
 80005bc:	797b      	ldrb	r3, [r7, #5]
 80005be:	3301      	adds	r3, #1
 80005c0:	717b      	strb	r3, [r7, #5]
	var4++;
 80005c2:	793b      	ldrb	r3, [r7, #4]
 80005c4:	3301      	adds	r3, #1
 80005c6:	713b      	strb	r3, [r7, #4]

	if(var1==100) var1=0;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b64      	cmp	r3, #100	; 0x64
 80005cc:	d101      	bne.n	80005d2 <main+0x8a>
 80005ce:	2300      	movs	r3, #0
 80005d0:	71fb      	strb	r3, [r7, #7]
	if(var2==100) var2=0;
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	2b64      	cmp	r3, #100	; 0x64
 80005d6:	d101      	bne.n	80005dc <main+0x94>
 80005d8:	2300      	movs	r3, #0
 80005da:	71bb      	strb	r3, [r7, #6]
	if(var3==100) var3=0;
 80005dc:	797b      	ldrb	r3, [r7, #5]
 80005de:	2b64      	cmp	r3, #100	; 0x64
 80005e0:	d101      	bne.n	80005e6 <main+0x9e>
 80005e2:	2300      	movs	r3, #0
 80005e4:	717b      	strb	r3, [r7, #5]
	if(var4==100) var4=0;
 80005e6:	793b      	ldrb	r3, [r7, #4]
 80005e8:	2b64      	cmp	r3, #100	; 0x64
 80005ea:	d101      	bne.n	80005f0 <main+0xa8>
 80005ec:	2300      	movs	r3, #0
 80005ee:	713b      	strb	r3, [r7, #4]

	HAL_Delay(30);
 80005f0:	201e      	movs	r0, #30
 80005f2:	f000 fb35 	bl	8000c60 <HAL_Delay>
	PWM_Write(&htim4, CH1, var1);
 80005f6:	e7c3      	b.n	8000580 <main+0x38>
 80005f8:	20000028 	.word	0x20000028
 80005fc:	20000070 	.word	0x20000070

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fa46 	bl	8002aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <SystemClock_Config+0xc8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <SystemClock_Config+0xc8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xcc>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <SystemClock_Config+0xcc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fdd9 	bl	800123c <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 f95a 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2103      	movs	r1, #3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 f83b 	bl	800172c <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006bc:	f000 f944 	bl	8000948 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_TIM2_Init+0x98>)
 80006ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_TIM2_Init+0x98>)
 80006f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80006fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_TIM2_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_TIM2_Init+0x98>)
 8000704:	f241 3287 	movw	r2, #4999	; 0x1387
 8000708:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_TIM2_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_TIM2_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000716:	4814      	ldr	r0, [pc, #80]	; (8000768 <MX_TIM2_Init+0x98>)
 8000718:	f001 f9f4 	bl	8001b04 <HAL_TIM_Base_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000722:	f000 f911 	bl	8000948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	4619      	mov	r1, r3
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_TIM2_Init+0x98>)
 8000734:	f001 fd6c 	bl	8002210 <HAL_TIM_ConfigClockSource>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800073e:	f000 f903 	bl	8000948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_TIM2_Init+0x98>)
 8000750:	f002 f924 	bl	800299c <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800075a:	f000 f8f5 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000028 	.word	0x20000028

0800076c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08e      	sub	sp, #56	; 0x38
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800079c:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <MX_TIM4_Init+0x134>)
 800079e:	4a41      	ldr	r2, [pc, #260]	; (80008a4 <MX_TIM4_Init+0x138>)
 80007a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80007a2:	4b3f      	ldr	r3, [pc, #252]	; (80008a0 <MX_TIM4_Init+0x134>)
 80007a4:	2263      	movs	r2, #99	; 0x63
 80007a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	4b3d      	ldr	r3, [pc, #244]	; (80008a0 <MX_TIM4_Init+0x134>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80007ae:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <MX_TIM4_Init+0x134>)
 80007b0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80007b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b6:	4b3a      	ldr	r3, [pc, #232]	; (80008a0 <MX_TIM4_Init+0x134>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007bc:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <MX_TIM4_Init+0x134>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007c2:	4837      	ldr	r0, [pc, #220]	; (80008a0 <MX_TIM4_Init+0x134>)
 80007c4:	f001 f99e 	bl	8001b04 <HAL_TIM_Base_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80007ce:	f000 f8bb 	bl	8000948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007dc:	4619      	mov	r1, r3
 80007de:	4830      	ldr	r0, [pc, #192]	; (80008a0 <MX_TIM4_Init+0x134>)
 80007e0:	f001 fd16 	bl	8002210 <HAL_TIM_ConfigClockSource>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80007ea:	f000 f8ad 	bl	8000948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007ee:	482c      	ldr	r0, [pc, #176]	; (80008a0 <MX_TIM4_Init+0x134>)
 80007f0:	f001 fa3a 	bl	8001c68 <HAL_TIM_PWM_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80007fa:	f000 f8a5 	bl	8000948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	4619      	mov	r1, r3
 800080c:	4824      	ldr	r0, [pc, #144]	; (80008a0 <MX_TIM4_Init+0x134>)
 800080e:	f002 f8c5 	bl	800299c <HAL_TIMEx_MasterConfigSynchronization>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000818:	f000 f896 	bl	8000948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081c:	2360      	movs	r3, #96	; 0x60
 800081e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	481b      	ldr	r0, [pc, #108]	; (80008a0 <MX_TIM4_Init+0x134>)
 8000834:	f001 fc2a 	bl	800208c <HAL_TIM_PWM_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800083e:	f000 f883 	bl	8000948 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2204      	movs	r2, #4
 800084a:	4619      	mov	r1, r3
 800084c:	4814      	ldr	r0, [pc, #80]	; (80008a0 <MX_TIM4_Init+0x134>)
 800084e:	f001 fc1d 	bl	800208c <HAL_TIM_PWM_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000858:	f000 f876 	bl	8000948 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2208      	movs	r2, #8
 8000864:	4619      	mov	r1, r3
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <MX_TIM4_Init+0x134>)
 8000868:	f001 fc10 	bl	800208c <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 8000872:	f000 f869 	bl	8000948 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	220c      	movs	r2, #12
 800087e:	4619      	mov	r1, r3
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <MX_TIM4_Init+0x134>)
 8000882:	f001 fc03 	bl	800208c <HAL_TIM_PWM_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM4_Init+0x124>
  {
    Error_Handler();
 800088c:	f000 f85c 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <MX_TIM4_Init+0x134>)
 8000892:	f000 f8c3 	bl	8000a1c <HAL_TIM_MspPostInit>

}
 8000896:	bf00      	nop
 8000898:	3738      	adds	r7, #56	; 0x38
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000070 	.word	0x20000070
 80008a4:	40000800 	.word	0x40000800

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_GPIO_Init+0x98>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a1e      	ldr	r2, [pc, #120]	; (8000940 <MX_GPIO_Init+0x98>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_GPIO_Init+0x98>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_GPIO_Init+0x98>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <MX_GPIO_Init+0x98>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_GPIO_Init+0x98>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_GPIO_Init+0x98>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <MX_GPIO_Init+0x98>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_GPIO_Init+0x98>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	480b      	ldr	r0, [pc, #44]	; (8000944 <MX_GPIO_Init+0x9c>)
 8000918:	f000 fc5c 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 800091c:	2320      	movs	r3, #32
 800091e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0x9c>)
 8000934:	f000 faca 	bl	8000ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000938:	bf00      	nop
 800093a:	3720      	adds	r7, #32
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b4:	d116      	bne.n	80009e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_TIM_Base_MspInit+0x70>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <HAL_TIM_Base_MspInit+0x70>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_TIM_Base_MspInit+0x70>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	201c      	movs	r0, #28
 80009d8:	f000 fa41 	bl	8000e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009dc:	201c      	movs	r0, #28
 80009de:	f000 fa5a 	bl	8000e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80009e2:	e012      	b.n	8000a0a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <HAL_TIM_Base_MspInit+0x74>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10d      	bne.n	8000a0a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_TIM_Base_MspInit+0x70>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_TIM_Base_MspInit+0x70>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_TIM_Base_MspInit+0x70>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40000800 	.word	0x40000800

08000a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <HAL_TIM_MspPostInit+0x68>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d11e      	bne.n	8000a7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_TIM_MspPostInit+0x6c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <HAL_TIM_MspPostInit+0x6c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_TIM_MspPostInit+0x6c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000a5a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000a5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <HAL_TIM_MspPostInit+0x70>)
 8000a78:	f000 fa28 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40000800 	.word	0x40000800
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020400 	.word	0x40020400

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f8a0 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8000ae8:	2120      	movs	r1, #32
 8000aea:	4804      	ldr	r0, [pc, #16]	; (8000afc <TIM2_IRQHandler+0x18>)
 8000aec:	f000 fb8b 	bl	8001206 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <TIM2_IRQHandler+0x1c>)
 8000af2:	f001 f9c3 	bl	8001e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40020000 	.word	0x40020000
 8000b00:	20000028 	.word	0x20000028

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b2e:	490e      	ldr	r1, [pc, #56]	; (8000b68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b30:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b44:	4c0b      	ldr	r4, [pc, #44]	; (8000b74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b52:	f7ff ffd7 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f001 ffab 	bl	8002ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fcf5 	bl	8000548 <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b6c:	08002b30 	.word	0x08002b30
  ldr r2, =_sbss
 8000b70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b74:	200000bc 	.word	0x200000bc

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_Init+0x40>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_Init+0x40>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x40>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f94f 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	200f      	movs	r0, #15
 8000bac:	f000 f808 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fed0 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f967 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f92f 	bl	8000e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000004 	.word	0x20000004

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	200000b8 	.word	0x200000b8

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200000b8 	.word	0x200000b8

08000c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c68:	f7ff ffee 	bl	8000c48 <HAL_GetTick>
 8000c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c78:	d005      	beq.n	8000c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_Delay+0x44>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c86:	bf00      	nop
 8000c88:	f7ff ffde 	bl	8000c48 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d8f7      	bhi.n	8000c88 <HAL_Delay+0x28>
  {
  }
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e14:	d301      	bcc.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00f      	b.n	8000e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <SysTick_Config+0x40>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	210f      	movs	r1, #15
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f7ff ff8e 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <SysTick_Config+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SysTick_Config+0x40>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff29 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e70:	f7ff ff3e 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	6978      	ldr	r0, [r7, #20]
 8000e7c:	f7ff ff8e 	bl	8000d9c <NVIC_EncodePriority>
 8000e80:	4602      	mov	r2, r0
 8000e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff5d 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff31 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffa2 	bl	8000e04 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e159      	b.n	800119c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 8148 	bne.w	8001196 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d017      	beq.n	8000fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80a2 	beq.w	8001196 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a56      	ldr	r2, [pc, #344]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_GPIO_Init+0x2ec>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a49      	ldr	r2, [pc, #292]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x202>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <HAL_GPIO_Init+0x2f4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x1fe>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a47      	ldr	r2, [pc, #284]	; (80011c4 <HAL_GPIO_Init+0x2f8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <HAL_GPIO_Init+0x2fc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x1f6>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a45      	ldr	r2, [pc, #276]	; (80011cc <HAL_GPIO_Init+0x300>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x1f2>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010be:	2307      	movs	r3, #7
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010ce:	2300      	movs	r3, #0
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e0:	4935      	ldr	r1, [pc, #212]	; (80011b8 <HAL_GPIO_Init+0x2ec>)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ee:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <HAL_GPIO_Init+0x304>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001112:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001118:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800113c:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001166:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001190:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3301      	adds	r3, #1
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	f67f aea2 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40013800 	.word	0x40013800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40013c00 	.word	0x40013c00

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	041a      	lsls	r2, r3, #16
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43d9      	mvns	r1, r3
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	400b      	ands	r3, r1
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e267      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d075      	beq.n	8001346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125a:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b04      	cmp	r3, #4
 8001264:	d00c      	beq.n	8001280 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b85      	ldr	r3, [pc, #532]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	2b08      	cmp	r3, #8
 8001270:	d112      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001272:	4b82      	ldr	r3, [pc, #520]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127e:	d10b      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	4b7e      	ldr	r3, [pc, #504]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d05b      	beq.n	8001344 <HAL_RCC_OscConfig+0x108>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d157      	bne.n	8001344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e242      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d106      	bne.n	80012b0 <HAL_RCC_OscConfig+0x74>
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a75      	ldr	r2, [pc, #468]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e01d      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x98>
 80012ba:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6f      	ldr	r2, [pc, #444]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b6d      	ldr	r3, [pc, #436]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a6c      	ldr	r2, [pc, #432]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012d4:	4b69      	ldr	r3, [pc, #420]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a68      	ldr	r2, [pc, #416]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a65      	ldr	r2, [pc, #404]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fca8 	bl	8000c48 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fca4 	bl	8000c48 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e207      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b5b      	ldr	r3, [pc, #364]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xc0>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fc94 	bl	8000c48 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fc90 	bl	8000c48 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1f3      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	4b51      	ldr	r3, [pc, #324]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0xe8>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d063      	beq.n	800141a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001352:	4b4a      	ldr	r3, [pc, #296]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	2b08      	cmp	r3, #8
 8001368:	d11c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d116      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e1c7      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4937      	ldr	r1, [pc, #220]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	e03a      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b34      	ldr	r3, [pc, #208]	; (8001480 <HAL_RCC_OscConfig+0x244>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff fc49 	bl	8000c48 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc45 	bl	8000c48 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1a8      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4925      	ldr	r1, [pc, #148]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_RCC_OscConfig+0x244>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc28 	bl	8000c48 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc24 	bl	8000c48 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e187      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d036      	beq.n	8001494 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d016      	beq.n	800145c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_RCC_OscConfig+0x248>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff fc08 	bl	8000c48 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fc04 	bl	8000c48 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e167      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x200>
 800145a:	e01b      	b.n	8001494 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_OscConfig+0x248>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff fbf1 	bl	8000c48 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	e00e      	b.n	8001488 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146a:	f7ff fbed 	bl	8000c48 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d907      	bls.n	8001488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e150      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
 800147c:	40023800 	.word	0x40023800
 8001480:	42470000 	.word	0x42470000
 8001484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4b88      	ldr	r3, [pc, #544]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800148a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ea      	bne.n	800146a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 8097 	beq.w	80015d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a6:	4b81      	ldr	r3, [pc, #516]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10f      	bne.n	80014d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b7d      	ldr	r3, [pc, #500]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a7c      	ldr	r2, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b74      	ldr	r3, [pc, #464]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a73      	ldr	r2, [pc, #460]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fbad 	bl	8000c48 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fba9 	bl	8000c48 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e10c      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x2ea>
 8001518:	4b64      	ldr	r3, [pc, #400]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a63      	ldr	r2, [pc, #396]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	e01c      	b.n	8001560 <HAL_RCC_OscConfig+0x324>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b05      	cmp	r3, #5
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x30c>
 800152e:	4b5f      	ldr	r3, [pc, #380]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a5e      	ldr	r2, [pc, #376]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153e:	4a5b      	ldr	r2, [pc, #364]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6713      	str	r3, [r2, #112]	; 0x70
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0x324>
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a57      	ldr	r2, [pc, #348]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	4b55      	ldr	r3, [pc, #340]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a54      	ldr	r2, [pc, #336]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d015      	beq.n	8001594 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fb6e 	bl	8000c48 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7ff fb6a 	bl	8000c48 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e0cb      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0ee      	beq.n	8001570 <HAL_RCC_OscConfig+0x334>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff fb58 	bl	8000c48 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff fb54 	bl	8000c48 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0b5      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ee      	bne.n	800159c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d105      	bne.n	80015d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a1 	beq.w	800171c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015da:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d05c      	beq.n	80016a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d141      	bne.n	8001672 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb28 	bl	8000c48 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fb24 	bl	8000c48 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e087      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	3b01      	subs	r3, #1
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	491b      	ldr	r1, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fafd 	bl	8000c48 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff faf9 	bl	8000c48 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e05c      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x416>
 8001670:	e054      	b.n	800171c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fae6 	bl	8000c48 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fae2 	bl	8000c48 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e045      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x444>
 800169e:	e03d      	b.n	800171c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e038      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000
 80016b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x4ec>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d028      	beq.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d121      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d11a      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e8:	4013      	ands	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d111      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	3b01      	subs	r3, #1
 8001702:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0cc      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d90c      	bls.n	8001768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b8      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	494d      	ldr	r1, [pc, #308]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d044      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e067      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff fa14 	bl	8000c48 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff fa10 	bl	8000c48 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e04f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d20c      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e032      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	490e      	ldr	r1, [pc, #56]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b2:	f000 f821 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	490a      	ldr	r1, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	5ccb      	ldrb	r3, [r1, r3]
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f974 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08002b10 	.word	0x08002b10
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018fc:	b094      	sub	sp, #80	; 0x50
 80018fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
 8001904:	2300      	movs	r3, #0
 8001906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001908:	2300      	movs	r3, #0
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001910:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d00d      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x40>
 800191c:	2b08      	cmp	r3, #8
 800191e:	f200 80e1 	bhi.w	8001ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x34>
 8001926:	2b04      	cmp	r3, #4
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x3a>
 800192a:	e0db      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b73      	ldr	r3, [pc, #460]	; (8001afc <HAL_RCC_GetSysClockFreq+0x204>)
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001930:	e0db      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001932:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001936:	e0d8      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001942:	4b6d      	ldr	r3, [pc, #436]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d063      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194e:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	2200      	movs	r2, #0
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
 8001958:	63fa      	str	r2, [r7, #60]	; 0x3c
 800195a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
 8001966:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800196a:	4622      	mov	r2, r4
 800196c:	462b      	mov	r3, r5
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	0159      	lsls	r1, r3, #5
 8001978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197c:	0150      	lsls	r0, r2, #5
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4621      	mov	r1, r4
 8001984:	1a51      	subs	r1, r2, r1
 8001986:	6139      	str	r1, [r7, #16]
 8001988:	4629      	mov	r1, r5
 800198a:	eb63 0301 	sbc.w	r3, r3, r1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800199c:	4659      	mov	r1, fp
 800199e:	018b      	lsls	r3, r1, #6
 80019a0:	4651      	mov	r1, sl
 80019a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a6:	4651      	mov	r1, sl
 80019a8:	018a      	lsls	r2, r1, #6
 80019aa:	4651      	mov	r1, sl
 80019ac:	ebb2 0801 	subs.w	r8, r2, r1
 80019b0:	4659      	mov	r1, fp
 80019b2:	eb63 0901 	sbc.w	r9, r3, r1
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ca:	4690      	mov	r8, r2
 80019cc:	4699      	mov	r9, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	eb18 0303 	adds.w	r3, r8, r3
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	462b      	mov	r3, r5
 80019d8:	eb49 0303 	adc.w	r3, r9, r3
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ea:	4629      	mov	r1, r5
 80019ec:	024b      	lsls	r3, r1, #9
 80019ee:	4621      	mov	r1, r4
 80019f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f4:	4621      	mov	r1, r4
 80019f6:	024a      	lsls	r2, r1, #9
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fe:	2200      	movs	r2, #0
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a08:	f7fe fbe6 	bl	80001d8 <__aeabi_uldivmod>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4613      	mov	r3, r2
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a14:	e058      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4611      	mov	r1, r2
 8001a22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a26:	623b      	str	r3, [r7, #32]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a30:	4642      	mov	r2, r8
 8001a32:	464b      	mov	r3, r9
 8001a34:	f04f 0000 	mov.w	r0, #0
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	0159      	lsls	r1, r3, #5
 8001a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a42:	0150      	lsls	r0, r2, #5
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4641      	mov	r1, r8
 8001a4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a4e:	4649      	mov	r1, r9
 8001a50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a68:	ebb2 040a 	subs.w	r4, r2, sl
 8001a6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	00eb      	lsls	r3, r5, #3
 8001a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7e:	00e2      	lsls	r2, r4, #3
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	4643      	mov	r3, r8
 8001a86:	18e3      	adds	r3, r4, r3
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	464b      	mov	r3, r9
 8001a8c:	eb45 0303 	adc.w	r3, r5, r3
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	028b      	lsls	r3, r1, #10
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	028a      	lsls	r2, r1, #10
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	61fa      	str	r2, [r7, #28]
 8001ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001abc:	f7fe fb8c 	bl	80001d8 <__aeabi_uldivmod>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae2:	e002      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3750      	adds	r7, #80	; 0x50
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e041      	b.n	8001b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7fe ff3a 	bl	80009a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4610      	mov	r0, r2
 8001b44:	f000 fc5e 	bl	8002404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d001      	beq.n	8001bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e044      	b.n	8001c46 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d018      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x6c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be6:	d013      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x6c>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00e      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x6c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_TIM_Base_Start_IT+0xb8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d009      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x6c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d004      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x6c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d111      	bne.n	8001c34 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d010      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c32:	e007      	b.n	8001c44 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40010000 	.word	0x40010000
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40000800 	.word	0x40000800
 8001c60:	40000c00 	.word	0x40000c00
 8001c64:	40014000 	.word	0x40014000

08001c68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e041      	b.n	8001cfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f839 	bl	8001d06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f000 fbac 	bl	8002404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_TIM_PWM_Start+0x24>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	e022      	b.n	8001d86 <HAL_TIM_PWM_Start+0x6a>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d109      	bne.n	8001d5a <HAL_TIM_PWM_Start+0x3e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e015      	b.n	8001d86 <HAL_TIM_PWM_Start+0x6a>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d109      	bne.n	8001d74 <HAL_TIM_PWM_Start+0x58>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e008      	b.n	8001d86 <HAL_TIM_PWM_Start+0x6a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e068      	b.n	8001e60 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d104      	bne.n	8001d9e <HAL_TIM_PWM_Start+0x82>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d9c:	e013      	b.n	8001dc6 <HAL_TIM_PWM_Start+0xaa>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d104      	bne.n	8001dae <HAL_TIM_PWM_Start+0x92>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dac:	e00b      	b.n	8001dc6 <HAL_TIM_PWM_Start+0xaa>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d104      	bne.n	8001dbe <HAL_TIM_PWM_Start+0xa2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dbc:	e003      	b.n	8001dc6 <HAL_TIM_PWM_Start+0xaa>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	6839      	ldr	r1, [r7, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fdbe 	bl	8002950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <HAL_TIM_PWM_Start+0x14c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d107      	bne.n	8001dee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <HAL_TIM_PWM_Start+0x14c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d018      	beq.n	8001e2a <HAL_TIM_PWM_Start+0x10e>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d013      	beq.n	8001e2a <HAL_TIM_PWM_Start+0x10e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_TIM_PWM_Start+0x150>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00e      	beq.n	8001e2a <HAL_TIM_PWM_Start+0x10e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <HAL_TIM_PWM_Start+0x154>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d009      	beq.n	8001e2a <HAL_TIM_PWM_Start+0x10e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a16      	ldr	r2, [pc, #88]	; (8001e74 <HAL_TIM_PWM_Start+0x158>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d004      	beq.n	8001e2a <HAL_TIM_PWM_Start+0x10e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <HAL_TIM_PWM_Start+0x15c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d111      	bne.n	8001e4e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b06      	cmp	r3, #6
 8001e3a:	d010      	beq.n	8001e5e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4c:	e007      	b.n	8001e5e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 0201 	orr.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40000800 	.word	0x40000800
 8001e74:	40000c00 	.word	0x40000c00
 8001e78:	40014000 	.word	0x40014000

08001e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0202 	mvn.w	r2, #2
 8001ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fa81 	bl	80023c6 <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fa73 	bl	80023b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fa84 	bl	80023da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0204 	mvn.w	r2, #4
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2202      	movs	r2, #2
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fa57 	bl	80023c6 <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fa49 	bl	80023b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fa5a 	bl	80023da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0208 	mvn.w	r2, #8
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fa2d 	bl	80023c6 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fa1f 	bl	80023b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fa30 	bl	80023da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d122      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0210 	mvn.w	r2, #16
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fa03 	bl	80023c6 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f9f5 	bl	80023b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fa06 	bl	80023da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d10e      	bne.n	8002000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0201 	mvn.w	r2, #1
 8001ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f9cf 	bl	800239e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	2b80      	cmp	r3, #128	; 0x80
 800200c:	d10e      	bne.n	800202c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002018:	2b80      	cmp	r3, #128	; 0x80
 800201a:	d107      	bne.n	800202c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fd30 	bl	8002a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002036:	2b40      	cmp	r3, #64	; 0x40
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f9cb 	bl	80023ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b20      	cmp	r3, #32
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b20      	cmp	r3, #32
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0220 	mvn.w	r2, #32
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fcfa 	bl	8002a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e0ae      	b.n	8002208 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	f200 809f 	bhi.w	80021f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020ba:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	080020f5 	.word	0x080020f5
 80020c4:	080021f9 	.word	0x080021f9
 80020c8:	080021f9 	.word	0x080021f9
 80020cc:	080021f9 	.word	0x080021f9
 80020d0:	08002135 	.word	0x08002135
 80020d4:	080021f9 	.word	0x080021f9
 80020d8:	080021f9 	.word	0x080021f9
 80020dc:	080021f9 	.word	0x080021f9
 80020e0:	08002177 	.word	0x08002177
 80020e4:	080021f9 	.word	0x080021f9
 80020e8:	080021f9 	.word	0x080021f9
 80020ec:	080021f9 	.word	0x080021f9
 80020f0:	080021b7 	.word	0x080021b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fa02 	bl	8002504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0208 	orr.w	r2, r2, #8
 800210e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0204 	bic.w	r2, r2, #4
 800211e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6999      	ldr	r1, [r3, #24]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	619a      	str	r2, [r3, #24]
      break;
 8002132:	e064      	b.n	80021fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fa48 	bl	80025d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800214e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800215e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6999      	ldr	r1, [r3, #24]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	021a      	lsls	r2, r3, #8
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	619a      	str	r2, [r3, #24]
      break;
 8002174:	e043      	b.n	80021fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fa93 	bl	80026a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0208 	orr.w	r2, r2, #8
 8002190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69da      	ldr	r2, [r3, #28]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0204 	bic.w	r2, r2, #4
 80021a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69d9      	ldr	r1, [r3, #28]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	61da      	str	r2, [r3, #28]
      break;
 80021b4:	e023      	b.n	80021fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fadd 	bl	800277c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69d9      	ldr	r1, [r3, #28]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	021a      	lsls	r2, r3, #8
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	61da      	str	r2, [r3, #28]
      break;
 80021f6:	e002      	b.n	80021fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	75fb      	strb	r3, [r7, #23]
      break;
 80021fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002206:	7dfb      	ldrb	r3, [r7, #23]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_TIM_ConfigClockSource+0x1c>
 8002228:	2302      	movs	r3, #2
 800222a:	e0b4      	b.n	8002396 <HAL_TIM_ConfigClockSource+0x186>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800224a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002264:	d03e      	beq.n	80022e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226a:	f200 8087 	bhi.w	800237c <HAL_TIM_ConfigClockSource+0x16c>
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002272:	f000 8086 	beq.w	8002382 <HAL_TIM_ConfigClockSource+0x172>
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227a:	d87f      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 800227c:	2b70      	cmp	r3, #112	; 0x70
 800227e:	d01a      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002280:	2b70      	cmp	r3, #112	; 0x70
 8002282:	d87b      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 8002284:	2b60      	cmp	r3, #96	; 0x60
 8002286:	d050      	beq.n	800232a <HAL_TIM_ConfigClockSource+0x11a>
 8002288:	2b60      	cmp	r3, #96	; 0x60
 800228a:	d877      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 800228c:	2b50      	cmp	r3, #80	; 0x50
 800228e:	d03c      	beq.n	800230a <HAL_TIM_ConfigClockSource+0xfa>
 8002290:	2b50      	cmp	r3, #80	; 0x50
 8002292:	d873      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d058      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x13a>
 8002298:	2b40      	cmp	r3, #64	; 0x40
 800229a:	d86f      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 800229c:	2b30      	cmp	r3, #48	; 0x30
 800229e:	d064      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15a>
 80022a0:	2b30      	cmp	r3, #48	; 0x30
 80022a2:	d86b      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d060      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15a>
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d867      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d05c      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15a>
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d05a      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15a>
 80022b4:	e062      	b.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f000 fb23 	bl	8002910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	609a      	str	r2, [r3, #8]
      break;
 80022e2:	e04f      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6899      	ldr	r1, [r3, #8]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f000 fb0c 	bl	8002910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002306:	609a      	str	r2, [r3, #8]
      break;
 8002308:	e03c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	461a      	mov	r2, r3
 8002318:	f000 fa80 	bl	800281c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2150      	movs	r1, #80	; 0x50
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fad9 	bl	80028da <TIM_ITRx_SetConfig>
      break;
 8002328:	e02c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	461a      	mov	r2, r3
 8002338:	f000 fa9f 	bl	800287a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2160      	movs	r1, #96	; 0x60
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fac9 	bl	80028da <TIM_ITRx_SetConfig>
      break;
 8002348:	e01c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6859      	ldr	r1, [r3, #4]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	461a      	mov	r2, r3
 8002358:	f000 fa60 	bl	800281c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2140      	movs	r1, #64	; 0x40
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fab9 	bl	80028da <TIM_ITRx_SetConfig>
      break;
 8002368:	e00c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f000 fab0 	bl	80028da <TIM_ITRx_SetConfig>
      break;
 800237a:	e003      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      break;
 8002380:	e000      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a34      	ldr	r2, [pc, #208]	; (80024e8 <TIM_Base_SetConfig+0xe4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00f      	beq.n	800243c <TIM_Base_SetConfig+0x38>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002422:	d00b      	beq.n	800243c <TIM_Base_SetConfig+0x38>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a31      	ldr	r2, [pc, #196]	; (80024ec <TIM_Base_SetConfig+0xe8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d007      	beq.n	800243c <TIM_Base_SetConfig+0x38>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a30      	ldr	r2, [pc, #192]	; (80024f0 <TIM_Base_SetConfig+0xec>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <TIM_Base_SetConfig+0x38>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a2f      	ldr	r2, [pc, #188]	; (80024f4 <TIM_Base_SetConfig+0xf0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d108      	bne.n	800244e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <TIM_Base_SetConfig+0xe4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01b      	beq.n	800248e <TIM_Base_SetConfig+0x8a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d017      	beq.n	800248e <TIM_Base_SetConfig+0x8a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a22      	ldr	r2, [pc, #136]	; (80024ec <TIM_Base_SetConfig+0xe8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <TIM_Base_SetConfig+0x8a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <TIM_Base_SetConfig+0xec>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00f      	beq.n	800248e <TIM_Base_SetConfig+0x8a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <TIM_Base_SetConfig+0xf0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00b      	beq.n	800248e <TIM_Base_SetConfig+0x8a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <TIM_Base_SetConfig+0xf4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <TIM_Base_SetConfig+0x8a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <TIM_Base_SetConfig+0xf8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d003      	beq.n	800248e <TIM_Base_SetConfig+0x8a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <TIM_Base_SetConfig+0xfc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d108      	bne.n	80024a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <TIM_Base_SetConfig+0xe4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d103      	bne.n	80024d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	615a      	str	r2, [r3, #20]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40000800 	.word	0x40000800
 80024f4:	40000c00 	.word	0x40000c00
 80024f8:	40014000 	.word	0x40014000
 80024fc:	40014400 	.word	0x40014400
 8002500:	40014800 	.word	0x40014800

08002504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f023 0201 	bic.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 0303 	bic.w	r3, r3, #3
 800253a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 0302 	bic.w	r3, r3, #2
 800254c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <TIM_OC1_SetConfig+0xc8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d10c      	bne.n	800257a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f023 0308 	bic.w	r3, r3, #8
 8002566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a13      	ldr	r2, [pc, #76]	; (80025cc <TIM_OC1_SetConfig+0xc8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d111      	bne.n	80025a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	621a      	str	r2, [r3, #32]
}
 80025c0:	bf00      	nop
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40010000 	.word	0x40010000

080025d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 0210 	bic.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f023 0320 	bic.w	r3, r3, #32
 800261a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <TIM_OC2_SetConfig+0xd4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d10d      	bne.n	800264c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800264a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <TIM_OC2_SetConfig+0xd4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d113      	bne.n	800267c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800265a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	621a      	str	r2, [r3, #32]
}
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40010000 	.word	0x40010000

080026a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <TIM_OC3_SetConfig+0xd0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10d      	bne.n	8002722 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800270c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <TIM_OC3_SetConfig+0xd0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d113      	bne.n	8002752 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	621a      	str	r2, [r3, #32]
}
 800276c:	bf00      	nop
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40010000 	.word	0x40010000

0800277c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	031b      	lsls	r3, r3, #12
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a10      	ldr	r2, [pc, #64]	; (8002818 <TIM_OC4_SetConfig+0x9c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d109      	bne.n	80027f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	019b      	lsls	r3, r3, #6
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	621a      	str	r2, [r3, #32]
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40010000 	.word	0x40010000

0800281c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	f023 0201 	bic.w	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f023 030a 	bic.w	r3, r3, #10
 8002858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	621a      	str	r2, [r3, #32]
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800287a:	b480      	push	{r7}
 800287c:	b087      	sub	sp, #28
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	f023 0210 	bic.w	r2, r3, #16
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	031b      	lsls	r3, r3, #12
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	621a      	str	r2, [r3, #32]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f043 0307 	orr.w	r3, r3, #7
 80028fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	609a      	str	r2, [r3, #8]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800292a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	021a      	lsls	r2, r3, #8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	431a      	orrs	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4313      	orrs	r3, r2
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	bf00      	nop
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2201      	movs	r2, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a1a      	ldr	r2, [r3, #32]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1a      	ldr	r2, [r3, #32]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	431a      	orrs	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	621a      	str	r2, [r3, #32]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e050      	b.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d018      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a00:	d013      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00e      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10c      	bne.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800
 8002a70:	40000c00 	.word	0x40000c00
 8002a74:	40014000 	.word	0x40014000

08002a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <memset>:
 8002aa0:	4402      	add	r2, r0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d100      	bne.n	8002aaa <memset+0xa>
 8002aa8:	4770      	bx	lr
 8002aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8002aae:	e7f9      	b.n	8002aa4 <memset+0x4>

08002ab0 <__libc_init_array>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	4d0d      	ldr	r5, [pc, #52]	; (8002ae8 <__libc_init_array+0x38>)
 8002ab4:	4c0d      	ldr	r4, [pc, #52]	; (8002aec <__libc_init_array+0x3c>)
 8002ab6:	1b64      	subs	r4, r4, r5
 8002ab8:	10a4      	asrs	r4, r4, #2
 8002aba:	2600      	movs	r6, #0
 8002abc:	42a6      	cmp	r6, r4
 8002abe:	d109      	bne.n	8002ad4 <__libc_init_array+0x24>
 8002ac0:	4d0b      	ldr	r5, [pc, #44]	; (8002af0 <__libc_init_array+0x40>)
 8002ac2:	4c0c      	ldr	r4, [pc, #48]	; (8002af4 <__libc_init_array+0x44>)
 8002ac4:	f000 f818 	bl	8002af8 <_init>
 8002ac8:	1b64      	subs	r4, r4, r5
 8002aca:	10a4      	asrs	r4, r4, #2
 8002acc:	2600      	movs	r6, #0
 8002ace:	42a6      	cmp	r6, r4
 8002ad0:	d105      	bne.n	8002ade <__libc_init_array+0x2e>
 8002ad2:	bd70      	pop	{r4, r5, r6, pc}
 8002ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad8:	4798      	blx	r3
 8002ada:	3601      	adds	r6, #1
 8002adc:	e7ee      	b.n	8002abc <__libc_init_array+0xc>
 8002ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae2:	4798      	blx	r3
 8002ae4:	3601      	adds	r6, #1
 8002ae6:	e7f2      	b.n	8002ace <__libc_init_array+0x1e>
 8002ae8:	08002b28 	.word	0x08002b28
 8002aec:	08002b28 	.word	0x08002b28
 8002af0:	08002b28 	.word	0x08002b28
 8002af4:	08002b2c 	.word	0x08002b2c

08002af8 <_init>:
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	bf00      	nop
 8002afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afe:	bc08      	pop	{r3}
 8002b00:	469e      	mov	lr, r3
 8002b02:	4770      	bx	lr

08002b04 <_fini>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr
